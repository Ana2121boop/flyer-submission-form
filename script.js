// --- Constants & State ---
const MAX_SOCIAL_ITEMS = 7;
let currentEditProductId = null;
const productDataStore = new Map(); // In-memory store for product data

// --- DOM Element References ---
let storeNameInput, submittedByInput, submissionDateElement, lastUpdatedElement, /* approvalStatusSelect, */
    startDateInput, endDateInput, generalNotesTextarea, productEditArea, productFormFieldsContainer,
    productListDiv, addProductBtn, saveProductBtn, cancelProductBtn, productFormFieldsTemplate,
    productDisplayTemplate, productSubmitErrorElement, productEditErrorElement, socialItemsListDiv,
    addSocialBtn, socialItemTemplate, socialMediaSection, socialLimitError, socialProductError,
    reqPriceTagsCheckbox, reqPostersCheckbox, reqSignageCheckbox, printNotesTextarea,
    flyerForm, formErrorElement, successModal, modalMessage, modalCloseBtn,
    // Admin Elements
    showAdminLoginBtn, adminSection, adminLogin, adminLoginForm, adminUsername, adminPassword,
    adminLoginError, adminDashboard, adminLogoutBtn, adminSubmissionsList,
    // Submission Detail Modal Elements
    submissionDetailModal, submissionDetailContent, submissionDetailCloseBtn;


// --- Utility Functions ---
function generateUUID() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => { const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); }); }
function formatDate(date) { if (!(date instanceof Date) || isNaN(date.getTime())) { date = new Date(); } const y = date.getFullYear(), m = (date.getMonth() + 1).toString().padStart(2, '0'), d = date.getDate().toString().padStart(2, '0'); return `${y}-${m}-${d}`; }
function formatDateTime(date) { if (!(date instanceof Date) || isNaN(date.getTime())) { date = new Date(); } const opts = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true }; return date.toLocaleString(undefined, opts); }
// Helper function to safely escape HTML (prevent XSS from submitted data)
function escapeHtml(unsafe) {
    if (typeof unsafe !== 'string') {
        if (unsafe === null || typeof unsafe === 'undefined') return '';
        try { return String(unsafe); } catch { return ''; }
    }
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }

// --- Product Specific Functions ---
function calculateDiscount(formArea) { if (!formArea) return; const regularPriceInput = formArea.querySelector('input[name="regularPrice"]'); const salePriceInput = formArea.querySelector('input[name="salePrice"]'); const discountInput = formArea.querySelector('input.discount-display'); if (!regularPriceInput || !salePriceInput || !discountInput) { return; } salePriceInput.setCustomValidity(""); discountInput.value = ''; const regularPrice = parseFloat(regularPriceInput.value); const salePrice = parseFloat(salePriceInput.value); if (!isNaN(regularPrice) && !isNaN(salePrice) && regularPrice > 0) { if (salePrice >= 0 && salePrice < regularPrice) { const discount = ((regularPrice - salePrice) / regularPrice) * 100; discountInput.value = discount.toFixed(1) + '%'; } else if (salePrice >= regularPrice) { if(salePriceInput.value !== "") { salePriceInput.setCustomValidity("Sale price must be less than regular price."); } } else { salePriceInput.setCustomValidity("Please enter a valid, non-negative sale price."); } } else if (regularPrice <= 0 && regularPriceInput.value !== "") { regularPriceInput.setCustomValidity("Regular price must be greater than zero."); } }
function handleImagePreview(event, previewContainer) { const input = event.target; if (!previewContainer || !input || !input.files) { if(previewContainer) previewContainer.innerHTML = '<small>No image selected.</small>'; return; } previewContainer.innerHTML = '<small>No image selected.</small>'; if (input.files && input.files[0]) { const file = input.files[0]; if (!file.type.startsWith('image/')) { previewContainer.innerHTML = '<small style="color: red;">Invalid file type.</small>'; input.value = ''; return; } const maxSizeMB = 5; const maxSize = maxSizeMB * 1024 * 1024; if (file.size > maxSize) { previewContainer.innerHTML = `<small style="color: red;">File too large (Max ${maxSizeMB}MB).</small>`; input.value = ''; return; } const reader = new FileReader(); reader.onload = function(e) { if (!e.target?.result) return; previewContainer.innerHTML = ''; const img = document.createElement('img'); img.src = e.target.result; img.alt = "Image Preview"; img.style.maxWidth = '100px'; img.style.maxHeight = '100px'; img.style.marginRight = '5px'; const fileNameSpan = document.createElement('span'); fileNameSpan.textContent = ` (${file.name})`; previewContainer.appendChild(img); previewContainer.appendChild(fileNameSpan); }; reader.onerror = function() { console.error("Error reading file:", reader.error); previewContainer.innerHTML = '<small style="color: red;">Error reading file.</small>'; input.value = ''; }; reader.readAsDataURL(file); } }
function showProductForm() { console.log("DEBUG: showProductForm function CALLED!"); if (!productFormFieldsContainer || !productFormFieldsTemplate || !productEditArea || !addProductBtn || !saveProductBtn || !cancelProductBtn || !productEditErrorElement) { console.error("ShowProductForm Error: Elements not found!"); alert("Error: Could not display product form."); return; } productEditErrorElement.style.display = 'none'; productFormFieldsContainer.innerHTML = ''; const formFieldsFragment = productFormFieldsTemplate.content.cloneNode(true); const priceInputs = formFieldsFragment.querySelectorAll('.price-input'); priceInputs.forEach(input => { input.addEventListener('input', () => calculateDiscount(productFormFieldsContainer)); }); const bundleCheckbox = formFieldsFragment.querySelector('.bundle-checkbox'); const bundleItemsDiv = formFieldsFragment.querySelector('.bundle-items-container'); if (bundleCheckbox && bundleItemsDiv) { const bundleTextarea = bundleItemsDiv.querySelector('textarea[name="bundleItems"]'); bundleCheckbox.addEventListener('change', (e) => { const target = e.target; const isChecked = target.checked; bundleItemsDiv.style.display = isChecked ? 'block' : 'none'; if(bundleTextarea) bundleTextarea.required = isChecked; }); const initialChecked = bundleCheckbox.checked; bundleItemsDiv.style.display = initialChecked ? 'block' : 'none'; if(bundleTextarea) bundleTextarea.required = initialChecked; } const imageInput = formFieldsFragment.querySelector('.product-image-input'); const previewDiv = formFieldsFragment.querySelector('.image-preview'); if (imageInput && previewDiv) { imageInput.addEventListener('change', (event) => handleImagePreview(event, previewDiv)); } productFormFieldsContainer.appendChild(formFieldsFragment); productEditArea.style.display = 'block'; addProductBtn.style.display = 'none'; saveProductBtn.removeEventListener('click', saveProduct); cancelProductBtn.removeEventListener('click', cancelProductEdit); saveProductBtn.addEventListener('click', saveProduct); cancelProductBtn.addEventListener('click', cancelProductEdit); const firstInput = productFormFieldsContainer.querySelector('input, select, textarea'); firstInput?.focus(); console.log("Product form shown."); }
function hideProductForm() { if (productFormFieldsContainer) { productFormFieldsContainer.innerHTML = ''; } if(productEditArea) productEditArea.style.display = 'none'; if(addProductBtn) addProductBtn.style.display = 'inline-block'; currentEditProductId = null; }
function saveProduct() { if (!productFormFieldsContainer || !productEditErrorElement) { console.error("SaveProduct Error: Elements not found."); return; } productEditErrorElement.style.display = 'none'; let isValid = true; let firstInvalidElement = null; productFormFieldsContainer.querySelectorAll('.invalid').forEach(el => el.classList.remove('invalid')); const inputsToCheck = productFormFieldsContainer.querySelectorAll('input[required]:not([type="checkbox"]), select[required], textarea[required]'); inputsToCheck.forEach(input => { if (!input.checkValidity()) { isValid = false; input.classList.add('invalid'); if (!firstInvalidElement) firstInvalidElement = input; } }); const salePriceInput = productFormFieldsContainer.querySelector('input[name="salePrice"]'); if(salePriceInput) { calculateDiscount(productFormFieldsContainer); if (!salePriceInput.checkValidity()) { isValid = false; salePriceInput.classList.add('invalid'); if (!firstInvalidElement) firstInvalidElement = salePriceInput; } } const bundleCheckbox = productFormFieldsContainer.querySelector('.bundle-checkbox'); const bundleTextarea = productFormFieldsContainer.querySelector('textarea[name="bundleItems"]'); if (bundleCheckbox?.checked && bundleTextarea) { if (!bundleTextarea.checkValidity()) { isValid = false; bundleTextarea.classList.add('invalid'); if (!firstInvalidElement) firstInvalidElement = bundleTextarea; } } if (!isValid) { productEditErrorElement.textContent = 'Please correct highlighted fields.'; productEditErrorElement.style.display = 'block'; firstInvalidElement?.focus(); if (salePriceInput && !salePriceInput.checkValidity()) salePriceInput.reportValidity(); if (bundleTextarea && !bundleTextarea.checkValidity()) bundleTextarea.reportValidity(); return; } const uniqueId = currentEditProductId || generateUUID(); const productData = { id: uniqueId }; try { const getValue = (selector) => productFormFieldsContainer?.querySelector(selector)?.value?.trim() || ''; const getChecked = (selector) => productFormFieldsContainer?.querySelector(selector)?.checked || false; const getFloat = (selector) => { const val = parseFloat(productFormFieldsContainer?.querySelector(selector)?.value); return isNaN(val) ? undefined : val; }; productData.productName = getValue('input[name="productName"]'); productData.brandName = getValue('input[name="brandName"]'); productData.category = getValue('select[name="category"]'); productData.sizeDimensions = getValue('input[name="sizeDimensions"]'); productData.colourFinish = getValue('input[name="colourFinish"]'); productData.sku = getValue('input[name="sku"]'); productData.regularPrice = getFloat('input[name="regularPrice"]'); productData.salePrice = getFloat('input[name="salePrice"]'); productData.discountPercent = getValue('input.discount-display'); productData.isMainFlyerProduct = getChecked('input[name="isMainFlyerProduct"]'); productData.isBundle = getChecked('input[name="isBundle"]'); productData.bundleItems = getValue('textarea[name="bundleItems"]'); productData.requestStockImage = getChecked('input[name="requestStockImage"]'); const imageInput = productFormFieldsContainer.querySelector('.product-image-input'); const previewImg = productFormFieldsContainer.querySelector('.image-preview img'); if (imageInput?.files && imageInput.files[0]) { const file = imageInput.files[0]; productData.imageFileName = file.name; if(previewImg && previewImg.src.startsWith('data:image')) { productData.imageDataUrl = previewImg.src; } } else if (currentEditProductId) { const existingData = getProductDataById(currentEditProductId); if (existingData) { productData.imageFileName = existingData.imageFileName; productData.imageDataUrl = existingData.imageDataUrl; } } else { productData.imageFileName = undefined; productData.imageDataUrl = undefined; } if (!productData.isBundle) { productData.bundleItems = undefined; } } catch (error) { console.error("Error gathering product data:", error); productEditErrorElement.textContent = 'Error gathering data.'; productEditErrorElement.style.display = 'block'; return; } storeProductData(productData); displayProductItem(productData); hideProductForm(); updateSocialProductOptions(); if (productSubmitErrorElement) productSubmitErrorElement.style.display = 'none'; console.log("Product saved/updated:", productData.id); }
function cancelProductEdit() { hideProductForm(); }
function displayProductItem(data) { if (!productListDiv || !productDisplayTemplate) { console.error("DisplayProductItem Error: Elements not found."); return; } let itemElement = productListDiv.querySelector(`.product-item[data-product-id="${data.id}"]`); if (!itemElement) { const displayFragment = productDisplayTemplate.content.cloneNode(true); itemElement = displayFragment.querySelector('.product-item'); if (!itemElement) return; itemElement.setAttribute('data-product-id', data.id); const removeBtn = itemElement.querySelector('.remove-item-btn'); removeBtn?.addEventListener('click', removeProduct); productListDiv.appendChild(itemElement); } const displayContentDiv = itemElement.querySelector('.product-display-content'); const previewImgElement = itemElement.querySelector('.product-preview-img'); if (displayContentDiv) { const formatPrice = (price) => price?.toFixed(2) ?? 'N/A'; const textContent = (text) => text || 'N/A'; displayContentDiv.innerHTML = `<h4>${textContent(data.productName)} (${textContent(data.brandName)})</h4><p><strong>Category:</strong> ${textContent(data.category)}</p><p><strong>Price:</strong> Reg $${formatPrice(data.regularPrice)} / Sale $${formatPrice(data.salePrice)}${data.discountPercent ? ` <span class="product-tag discount-tag">${data.discountPercent} Off</span>` : ''}</p>${data.sku ? `<p><strong>SKU:</strong> ${textContent(data.sku)}</p>` : ''}${data.sizeDimensions ? `<p><strong>Size:</strong> ${textContent(data.sizeDimensions)}</p>` : ''}${data.colourFinish ? `<p><strong>Colour:</strong> ${textContent(data.colourFinish)}</p>` : ''}${data.specialFeatures ? `<p><strong>Features:</strong> ${textContent(data.specialFeatures)}</p>` : ''}<div> ${data.isMainFlyerProduct ? `<span class="product-tag main-flyer-tag">Main Flyer</span>` : ''} ${data.isBundle ? `<span class="product-tag bundle-tag">Bundle</span> ${data.bundleItems ? `(${textContent(data.bundleItems)})` : ''}`: ''} ${data.requestStockImage ? `<span class="product-tag stock-image-tag">Request Stock Image</span>` : ''}</div> ${data.imageFileName ? `<p style="margin-top: 8px;"><small>Image: ${textContent(data.imageFileName)}</small></p>` : ''}`; } if (previewImgElement) { if (data.imageDataUrl) { previewImgElement.src = data.imageDataUrl; previewImgElement.alt = data.productName || 'Product Preview'; previewImgElement.style.display = 'block'; } else { previewImgElement.style.display = 'none'; previewImgElement.src = ''; previewImgElement.alt = 'Product Preview'; } } }
function removeProduct(event) { const button = event.target; const productItem = button.closest('.product-item'); if (productItem) { if (window.confirm('Are you sure?')) { const productIdToRemove = productItem.getAttribute('data-product-id'); productItem.remove(); if (productIdToRemove) { removeProductData(productIdToRemove); cleanupSocialMediaOptions(productIdToRemove); } updateSocialProductOptions(); if (productListDiv && productListDiv.querySelectorAll('.product-item').length === 0) { if(productSubmitErrorElement) productSubmitErrorElement.style.display = 'block'; } console.log(`Product removed: ${productIdToRemove || 'Unknown ID'}`); } } }

// --- Social Media Functions ---
function updateSocialProductOptions() { if (!productListDiv || !socialItemsListDiv) return; const productItems = productListDiv.querySelectorAll('.product-item'); const options = []; productItems.forEach(item => { const productId = item.getAttribute('data-product-id'); if (productId) { const data = getProductDataById(productId); if (data) { options.push({ value: data.id, text: `${data.productName} (${data.brandName || 'N/A'})` }); } } }); const socialSelects = socialItemsListDiv.querySelectorAll('.social-product-select'); socialSelects.forEach(select => { const currentValue = select.value; while (select.options.length > 1) select.remove(1); options.forEach(opt => { const option = document.createElement('option'); option.value = opt.value; option.textContent = opt.text; select.appendChild(option); }); select.value = options.some(opt => opt.value === currentValue) ? currentValue : ""; }); const hasProducts = productItems.length > 0; if (addSocialBtn && socialProductError) { const currentSocialCount = socialItemsListDiv.querySelectorAll('.social-item').length; addSocialBtn.disabled = !hasProducts || (currentSocialCount >= MAX_SOCIAL_ITEMS); socialProductError.style.display = hasProducts ? 'none' : 'block'; } }
function cleanupSocialMediaOptions(removedProductId) { if (!removedProductId || !socialItemsListDiv) return; const socialItems = socialItemsListDiv.querySelectorAll('.social-item'); socialItems.forEach(item => { const select = item.querySelector('select[name="socialProductId"]'); if (select && select.value === removedProductId) { select.value = ""; } }); if (addSocialBtn) { const hasProducts = productListDiv?.querySelectorAll('.product-item').length > 0; const currentSocialCount = socialItemsListDiv.querySelectorAll('.social-item').length; addSocialBtn.disabled = !hasProducts || (currentSocialCount >= MAX_SOCIAL_ITEMS); } if(socialLimitError) socialLimitError.style.display = 'none'; }
function addSocialItem() { if (!socialItemsListDiv || !socialItemTemplate || !productListDiv || !addSocialBtn || !socialLimitError) return; const currentSocialItemsCount = socialItemsListDiv.querySelectorAll('.social-item').length; const hasProducts = productListDiv.querySelectorAll('.product-item').length > 0; if (!hasProducts || currentSocialItemsCount >= MAX_SOCIAL_ITEMS) { if(socialLimitError) socialLimitError.style.display = currentSocialItemsCount >= MAX_SOCIAL_ITEMS ? 'block' : 'none'; return; } if(socialLimitError) socialLimitError.style.display = 'none'; const socialFragment = socialItemTemplate.content.cloneNode(true); const socialItemElement = socialFragment.querySelector('.social-item'); if (!socialItemElement) return; const uniqueId = generateUUID(); socialItemElement.setAttribute('data-social-id', uniqueId); const removeBtn = socialItemElement.querySelector('.remove-item-btn'); removeBtn?.addEventListener('click', removeSocialItem); socialItemsListDiv.appendChild(socialItemElement); updateSocialProductOptions(); addSocialBtn.disabled = (socialItemsListDiv.querySelectorAll('.social-item').length >= MAX_SOCIAL_ITEMS); }
function removeSocialItem(event) { const button = event.target; const socialItem = button.closest('.social-item'); if (socialItem) { socialItem.remove(); if(socialLimitError) socialLimitError.style.display = 'none'; if (addSocialBtn && productListDiv) { const hasProducts = productListDiv.querySelectorAll('.product-item').length > 0; const currentSocialCount = socialItemsListDiv?.querySelectorAll('.social-item').length ?? 0; addSocialBtn.disabled = !hasProducts || (currentSocialCount >= MAX_SOCIAL_ITEMS); } console.log("Social item removed."); } }

// --- Modal Functions ---
function showSuccessModal(message) { if (modalMessage) { modalMessage.textContent = message; } if (successModal) { successModal.classList.add('visible'); } else { alert(message + "\n(Modal failed.)"); console.error("Success Modal element not found!"); } }
function closeSuccessModal() { if (successModal) { successModal.classList.remove('visible'); } }

// --- Submission Detail Modal Functions ---
function showSubmissionDetailModal(submissionData) { if (!submissionDetailModal || !submissionDetailContent || !submissionDetailCloseBtn) { console.error("Detail modal elements missing!"); alert("Error showing details."); return; } console.log("Displaying details for submission ID:", submissionData?.id); submissionDetailContent.innerHTML = '<p>Loading...</p>'; const formData = submissionData?.form_data || {}; const submittedAt = submissionData?.submitted_at ? formatDateTime(new Date(submissionData.submitted_at)) : 'N/A'; let detailsHtml = `<p><strong>Submission ID:</strong> ${escapeHtml(submissionData?.id)}</p><p><strong>Submitted At:</strong> ${escapeHtml(submittedAt)}</p><p><strong>Store Name:</strong> ${escapeHtml(formData.storeName)}</p><p><strong>Submitted By:</strong> ${escapeHtml(formData.submittedBy)}</p><p><strong>Flyer Start:</strong> ${escapeHtml(formData.flyerValidStartDate)}</p><p><strong>Flyer End:</strong> ${escapeHtml(formData.flyerValidEndDate)}</p><p><strong>General Notes:</strong></p><pre>${escapeHtml(formData.generalNotes)}</pre><hr>`; detailsHtml += '<h3>Products</h3>'; if (formData.products && formData.products.length > 0) { formData.products.forEach((product, index) => { detailsHtml += `<div class="product-detail-item"><h4>Product ${index + 1}: ${escapeHtml(product.productName)} (${escapeHtml(product.brandName)})</h4>${product.imageDataUrl ? `<img src="${escapeHtml(product.imageDataUrl)}" alt="${escapeHtml(product.productName)}" style="max-width: 100px; max-height: 100px; float: right; margin-left: 10px;">` : '<p style="float: right; font-size: 0.8em; color: #777;">(No Image)</p>'}<p><strong>Category:</strong> ${escapeHtml(product.category)}</p><p><strong>Price:</strong> Reg $${product.regularPrice?.toFixed(2) ?? 'N/A'} / Sale $${product.salePrice?.toFixed(2) ?? 'N/A'} (${escapeHtml(product.discountPercent)})</p>${product.sku ? `<p><strong>SKU:</strong> ${escapeHtml(product.sku)}</p>` : ''}${product.sizeDimensions ? `<p><strong>Size:</strong> ${escapeHtml(product.sizeDimensions)}</p>` : ''}${product.colourFinish ? `<p><strong>Colour:</strong> ${escapeHtml(product.colourFinish)}</p>` : ''}${product.isBundle ? `<p><strong>Bundle Items:</strong> ${escapeHtml(product.bundleItems)}</p>` : ''}<p style="clear: both;"><strong>Flags:</strong> ${product.isMainFlyerProduct ? `<span class="product-tag main-flyer-tag">Main</span>` : ''} ${product.isBundle ? `<span class="product-tag bundle-tag">Bundle</span>` : ''} ${product.requestStockImage ? `<span class="product-tag stock-image-tag">Req Stock Img</span>` : ''} ${product.imageFileName && !product.imageDataUrl ? `<span class="product-tag">Ref Img: ${escapeHtml(product.imageFileName)}</span>` : ''}</p></div>`;}); } else { detailsHtml += '<p>No products submitted.</p>'; } detailsHtml += '<hr>'; detailsHtml += '<h3>Social Media Items</h3>'; if (formData.socialMediaItems && formData.socialMediaItems.length > 0) { formData.socialMediaItems.forEach(item => { detailsHtml += `<div class="social-detail-item"><p><strong>Product Ref:</strong> ${escapeHtml(item.productName)} (ID: ${escapeHtml(item.productId)})</p><p><strong>Type:</strong> ${escapeHtml(item.postType)}</p><p><strong>Caption:</strong> ${escapeHtml(item.caption)}</p></div>`; }); } else { detailsHtml += '<p>No social items requested.</p>'; } detailsHtml += '<hr>'; detailsHtml += '<h3>Print Requests</h3>'; const pr = formData.printRequests || {}; detailsHtml += `<p><strong>Tags:</strong> ${pr.priceTags ? 'Yes' : 'No'}</p><p><strong>Posters:</strong> ${pr.posters ? 'Yes' : 'No'}</p><p><strong>Signage:</strong> ${pr.inStoreSignage ? 'Yes' : 'No'}</p><p><strong>Notes:</strong></p><pre>${escapeHtml(pr.notes)}</pre>`; submissionDetailContent.innerHTML = detailsHtml; submissionDetailModal.classList.add('visible'); }
function closeSubmissionDetailModal() { if (submissionDetailModal) { submissionDetailModal.classList.remove('visible'); if (submissionDetailContent) submissionDetailContent.innerHTML = '<p>Loading details...</p>'; } }
async function fetchAndDisplaySingleSubmission(submissionId) { if (!submissionId) { console.error("No ID for detail fetch."); return; } console.log(`Workspaceing details for ID: ${submissionId}`); if (submissionDetailModal && submissionDetailContent) { submissionDetailContent.innerHTML = '<p>Loading details...</p>'; submissionDetailModal.classList.add('visible'); } else { console.error("Detail modal elements missing."); alert("Loading..."); } const token = sessionStorage.getItem('adminToken'); if (!token) { console.error("No token for detail fetch."); if(submissionDetailContent) submissionDetailContent.innerHTML = '<p class="error-message">Not logged in.</p>'; return; } try { const response = await fetch(`/api/admin/submission/${submissionId}`, { method: 'GET', headers: { 'Authorization': `Bearer ${token}` } }); if (response.ok) { const submissionData = await response.json(); showSubmissionDetailModal(submissionData); } else if (response.status === 404) { console.error(`Submission ${submissionId} not found.`); if(submissionDetailContent) submissionDetailContent.innerHTML = `<p class="error-message">Error: Submission ${submissionId} not found.</p>`; } else if (response.status === 401 || response.status === 403) { console.error('Unauthorized/Forbidden detail fetch:', response.statusText); sessionStorage.removeItem('adminToken'); if(submissionDetailContent) submissionDetailContent.innerHTML = '<p class="error-message">Session expired.</p>'; setTimeout(closeSubmissionDetailModal, 1500); handleAdminLogout(); } else { const errorResult = await response.text(); console.error('Error fetching detail:', response.status, errorResult); if(submissionDetailContent) submissionDetailContent.innerHTML = `<p class="error-message">Error: ${response.statusText}</p>`; } } catch (error) { console.error('Network error fetching detail:', error); if(submissionDetailContent) submissionDetailContent.innerHTML = '<p class="error-message">Network error.</p>'; } }

// --- Admin Login Handler ---
async function handleAdminLogin(event) { event.preventDefault(); console.log("Admin login submitted"); if (!adminUsername || !adminPassword || !adminLoginError || !adminLogin || !adminDashboard) { return; } const username = adminUsername.value; const password = adminPassword.value; adminLoginError.textContent = ''; adminLoginError.style.display = 'none'; if (!username || !password) { adminLoginError.textContent = 'Username/password required.'; adminLoginError.style.display = 'block'; return; } console.log(`Attempting login: ${username}`); try { const response = await fetch('/api/admin/login', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ username, password }), }); const result = await response.json(); if (response.ok) { console.log('Login OK:', result); sessionStorage.setItem('adminToken', result.token); console.log("Token stored"); adminLogin.style.display = 'none'; adminDashboard.style.display = 'block'; adminPassword.value = ''; loadAdminSubmissions(); } else { console.error('Login failed:', result); adminLoginError.textContent = result.message || 'Login failed.'; adminLoginError.style.display = 'block'; adminPassword.value = ''; } } catch (error) { console.error('Network err login:', error); adminLoginError.textContent = 'Network error.'; adminLoginError.style.display = 'block'; adminPassword.value = ''; } }

// --- Admin Logout Handler ---
function handleAdminLogout() { console.log("Logout clicked"); sessionStorage.removeItem('adminToken'); console.log("Token removed"); if (!adminDashboard || !adminLogin || !adminSection || !showAdminLoginBtn || !flyerForm) { return; } adminDashboard.style.display = 'none'; adminSection.style.display = 'none'; adminLogin.style.display = 'block'; flyerForm.style.display = 'block'; showAdminLoginBtn.style.display = 'inline-block'; if(adminUsername) adminUsername.value = ''; if(adminPassword) adminPassword.value = ''; if (adminSubmissionsList) adminSubmissionsList.innerHTML = ''; console.log("Admin logged out."); }

// --- Admin Submissions Functions ---
async function loadAdminSubmissions() { console.log("Loading submissions..."); if (!adminSubmissionsList) return; const token = sessionStorage.getItem('adminToken'); if (!token) { adminSubmissionsList.innerHTML = '<p class="error-message">Not logged in.</p>'; return; } adminSubmissionsList.innerHTML = '<p>Loading...</p>'; try { const response = await fetch('/api/admin/submissions', { method: 'GET', headers: { 'Authorization': `Bearer ${token}` } }); if (response.ok) { const submissions = await response.json(); displaySubmissions(submissions); } else if (response.status === 401 || response.status === 403) { console.error('Unauthorized/Forbidden:', response.statusText); sessionStorage.removeItem('adminToken'); adminSubmissionsList.innerHTML = '<p class="error-message">Session expired.</p>'; handleAdminLogout(); } else { const errorResult = await response.text(); console.error('Error fetch submissions:', response.status, errorResult); adminSubmissionsList.innerHTML = `<p class="error-message">Error: ${response.statusText}</p>`; } } catch (error) { console.error('Network error loading submissions:', error); adminSubmissionsList.innerHTML = '<p class="error-message">Network error.</p>'; } }

/** Displays submissions in a clickable table using summary data */
function displaySubmissions(submissions) {
    if (!adminSubmissionsList) { console.error("Cannot find adminSubmissionsList."); return; } adminSubmissionsList.innerHTML = ''; if (!submissions || submissions.length === 0) { adminSubmissionsList.innerHTML = '<p>No submissions found.</p>'; return; } const table = document.createElement('table'); table.className = 'submissions-table'; const thead = table.createTHead(); const headerRow = thead.insertRow(); const headers = ['ID', 'Submitted At', 'Store', 'Submitter', 'Product Count', 'Details']; headers.forEach(text => { const th = document.createElement('th'); th.textContent = text; headerRow.appendChild(th); }); const tbody = table.createTBody();
    submissions.forEach(submission => {
        const row = tbody.insertRow(); row.setAttribute('data-submission-id', submission.id); row.classList.add('submission-row-clickable'); // row.style.cursor = 'pointer'; // Set via CSS instead
        const cellId = row.insertCell(); cellId.textContent = submission.id || 'N/A';
        const cellDate = row.insertCell(); cellDate.textContent = submission.submitted_at ? formatDateTime(new Date(submission.submitted_at)) : 'N/A';
        const cellStore = row.insertCell(); cellStore.textContent = submission.store_name || 'N/A'; // Use alias from backend
        const cellSubmitter = row.insertCell(); cellSubmitter.textContent = submission.submitted_by || 'N/A'; // Use alias from backend
        const cellProducts = row.insertCell(); cellProducts.textContent = (typeof submission.product_count === 'number') ? `${submission.product_count}` : 'N/A'; cellProducts.style.textAlign = 'center';
        const cellDetails = row.insertCell(); cellDetails.innerHTML = '<small>View Details</small>'; cellDetails.style.textAlign = 'center'; cellDetails.style.verticalAlign = 'middle'; cellDetails.style.color = '#007bff'; cellDetails.style.textDecoration = 'underline';
    });
    // Attach ONE listener to the table body for delegation
    tbody.addEventListener('click', (event) => { const clickedRow = event.target.closest('tr.submission-row-clickable'); if (clickedRow?.dataset.submissionId) { fetchAndDisplaySingleSubmission(clickedRow.dataset.submissionId); } });
    adminSubmissionsList.appendChild(table); console.log("Submissions displayed.");
}

// --- Check Login State On Load ---
function checkLoginState() { console.log("Checking login state..."); const token = sessionStorage.getItem('adminToken'); if (token) { console.log("Token found, showing dashboard."); if (adminSection && adminLogin && adminDashboard && flyerForm && showAdminLoginBtn) { adminSection.style.display = 'block'; adminLogin.style.display = 'none'; adminDashboard.style.display = 'block'; flyerForm.style.display = 'none'; showAdminLoginBtn.style.display = 'none'; loadAdminSubmissions(); } } else { console.log("No token found, showing public view."); if (adminSection) adminSection.style.display = 'none'; if (flyerForm) flyerForm.style.display = 'block'; if (showAdminLoginBtn) showAdminLoginBtn.style.display = 'inline-block'; } }

// --- Initialization ---
function initializeForm() {
    console.log("Initializing form...");
    // Assign all element references
    storeNameInput = document.getElementById('storeNameInput'); submittedByInput = document.getElementById('submittedByInput'); submissionDateElement = document.getElementById('submissionDate'); lastUpdatedElement = document.getElementById('lastUpdated'); /* approvalStatusSelect = document.getElementById('approvalStatus'); */ startDateInput = document.getElementById('flyerValidStartDate'); endDateInput = document.getElementById('flyerValidEndDate'); generalNotesTextarea = document.getElementById('generalNotes'); productEditArea = document.getElementById('productEditArea'); productFormFieldsContainer = document.getElementById('productFormFieldsContainer'); productListDiv = document.getElementById('productList'); addProductBtn = document.getElementById('addProductBtn'); saveProductBtn = document.getElementById('saveProductBtn'); cancelProductBtn = document.getElementById('cancelProductBtn'); productFormFieldsTemplate = document.getElementById('productFormFieldsTemplate'); productDisplayTemplate = document.getElementById('productDisplayTemplate'); productSubmitErrorElement = document.getElementById('productSubmitError'); productEditErrorElement = document.getElementById('productEditError'); socialItemsListDiv = document.getElementById('socialItemsList'); addSocialBtn = document.getElementById('addSocialBtn'); socialItemTemplate = document.getElementById('socialItemTemplate'); socialMediaSection = document.getElementById('socialMediaSection'); socialLimitError = document.getElementById('socialLimitError'); socialProductError = document.getElementById('socialProductError'); reqPriceTagsCheckbox = document.getElementById('reqPriceTags'); reqPostersCheckbox = document.getElementById('reqPosters'); reqSignageCheckbox = document.getElementById('reqSignage'); printNotesTextarea = document.getElementById('printNotes'); flyerForm = document.getElementById('flyerForm'); formErrorElement = document.getElementById('formError'); successModal = document.getElementById('successModal'); modalMessage = document.getElementById('modalMessage'); modalCloseBtn = document.getElementById('modalCloseBtn');
    showAdminLoginBtn = document.getElementById('showAdminLoginBtn'); adminSection = document.getElementById('adminSection'); adminLogin = document.getElementById('adminLogin'); adminLoginForm = document.getElementById('adminLoginForm'); adminUsername = document.getElementById('adminUsername'); adminPassword = document.getElementById('adminPassword'); adminLoginError = document.getElementById('adminLoginError'); adminDashboard = document.getElementById('adminDashboard'); adminLogoutBtn = document.getElementById('adminLogoutBtn'); adminSubmissionsList = document.getElementById('adminSubmissionsList');
    submissionDetailModal = document.getElementById('submissionDetailModal'); submissionDetailContent = document.getElementById('submissionDetailContent'); submissionDetailCloseBtn = document.getElementById('submissionDetailCloseBtn');

    // Check essential elements
    const essentialElements = [ flyerForm, addProductBtn, addSocialBtn, successModal, modalCloseBtn, productEditArea, productFormFieldsContainer, productListDiv, saveProductBtn, cancelProductBtn, productFormFieldsTemplate, productDisplayTemplate, socialItemsListDiv, socialItemTemplate, showAdminLoginBtn, adminSection, adminLogin, adminLoginForm, adminDashboard, adminLogoutBtn, adminSubmissionsList, submissionDetailModal, submissionDetailContent, submissionDetailCloseBtn ];
    if (essentialElements.some(el => !el)) { console.error("Essential elements missing!"); const missingIds = [/* add all ids */]; missingIds.forEach(id => { if (!document.getElementById(id)) console.error(`Missing: #${id}`) }); document.body.innerHTML = '<p style="color: red;">Error: Components failed load.</p>'; return; }

    // Set initial values
    const now = new Date(); if (submissionDateElement) submissionDateElement.textContent = formatDateTime(now); if (lastUpdatedElement) lastUpdatedElement.textContent = formatDateTime(now); if (productListDiv) productListDiv.innerHTML = ''; if (socialItemsListDiv) socialItemsListDiv.innerHTML = '';

    // Attach Event Listeners
    addProductBtn.addEventListener('click', showProductForm); addSocialBtn.addEventListener('click', addSocialItem); flyerForm.addEventListener('submit', handleSubmit); modalCloseBtn.addEventListener('click', closeSuccessModal); successModal.addEventListener('click', (event) => { if (event.target === successModal) { closeSuccessModal(); } });
    submissionDetailCloseBtn.addEventListener('click', closeSubmissionDetailModal); submissionDetailModal.addEventListener('click', (event) => { if (event.target === submissionDetailModal) { closeSubmissionDetailModal(); } });

    // Attach Admin Listeners
    if (showAdminLoginBtn && adminSection && adminLogin && adminDashboard && flyerForm) { showAdminLoginBtn.addEventListener('click', () => { console.log('Admin Access clicked'); flyerForm.style.display = 'none'; adminSection.style.display = 'block'; adminLogin.style.display = 'block'; adminDashboard.style.display = 'none'; if (adminUsername) adminUsername.focus(); showAdminLoginBtn.style.display = 'none'; }); } else { console.error("Could not attach Admin Access listener."); }
    if (adminLoginForm) { adminLoginForm.addEventListener('submit', handleAdminLogin); } else { console.error("Could not attach Admin Login Form listener."); }
    if (adminLogoutBtn) { adminLogoutBtn.addEventListener('click', handleAdminLogout); } else { console.error("Could not attach Admin Logout Button listener."); }

    // Initial State Setup
    updateSocialProductOptions(); console.log("Form Initialized successfully.");
    checkLoginState(); // Call check login state
}

// --- Form Submission Handler (Main Form) ---
async function handleSubmit(event) { /* ... (keep existing handleSubmit code - approvalStatus logic removed) ... */ event.preventDefault(); if (!flyerForm || !productListDiv) { console.error("Submit Error: Elements missing."); return; } console.log("Form submission initiated..."); if(formErrorElement) { formErrorElement.textContent = ''; formErrorElement.style.display = 'none'; } if(productSubmitErrorElement) { productSubmitErrorElement.style.display = 'none'; } flyerForm.querySelectorAll('.invalid').forEach(el => el.classList.remove('invalid')); let isFormValid = true; let firstInvalidElement = null; const validationErrors = []; const mainFormInputs = flyerForm.querySelectorAll('#storeNameInput, #submittedByInput, #flyerValidStartDate, #flyerValidEndDate'); mainFormInputs.forEach(input => { if (!input.checkValidity()) { isFormValid = false; input.classList.add('invalid'); if (!firstInvalidElement) firstInvalidElement = input; const label = flyerForm?.querySelector(`label[for="${input.id}"]`)?.textContent || input.name || input.id; validationErrors.push(`${label.replace(':*', '').trim()} invalid.`); } }); if (startDateInput && endDateInput) { const startDate = startDateInput.value; const endDate = endDateInput.value; endDateInput.setCustomValidity(""); if (startDate && endDate && endDate < startDate) { isFormValid = false; endDateInput.classList.add('invalid'); endDateInput.setCustomValidity("End Date < Start Date."); if (!firstInvalidElement) firstInvalidElement = endDateInput; validationErrors.push("End Date < Start Date."); } } const productElements = productListDiv.querySelectorAll('.product-item'); if (!productElements || productElements.length === 0) { isFormValid = false; if(productSubmitErrorElement) productSubmitErrorElement.style.display = 'block'; if (!firstInvalidElement && addProductBtn) firstInvalidElement = addProductBtn; validationErrors.push("Add >= 1 product."); } if (!isFormValid) { if(formErrorElement) { formErrorElement.innerHTML = 'Fix issues:<br>' + validationErrors.join('<br>'); formErrorElement.style.display = 'block'; } firstInvalidElement?.focus(); if (endDateInput && !endDateInput.checkValidity() && endDateInput.validationMessage) { endDateInput.reportValidity(); } console.error("Submit Validation Failed:", validationErrors); return; } console.log("Validation passed. Gathering data..."); const products = []; let productGatherError = false; productElements.forEach(item => { const id = item.getAttribute('data-product-id'); if (id) { const productData = getProductDataById(id); if(productData) { products.push(productData); } else { console.error(`CRITICAL: No data for ID: ${id}.`); productGatherError = true; } } else { console.error("CRITICAL: Item missing ID."); productGatherError = true; } }); if (productGatherError) { if(formErrorElement){ formErrorElement.textContent = 'Internal error (product data).'; formErrorElement.style.display = 'block'; } return; } const socialMediaItems = []; const socialElements = socialItemsListDiv?.querySelectorAll('.social-item'); socialElements?.forEach(item => { const id = item.getAttribute('data-social-id') || generateUUID(); const productIdSelect = item.querySelector('select[name="socialProductId"]'); const postTypeSelect = item.querySelector('select[name="socialPostType"]'); const captionInput = item.querySelector('input[name="socialCaption"]'); if (productIdSelect?.value && postTypeSelect?.value) { const selectedOption = productIdSelect.options[productIdSelect.selectedIndex]; const productNameRef = selectedOption ? selectedOption.text : 'N/A'; socialMediaItems.push({ id, productId: productIdSelect.value, productName: productNameRef, caption: captionInput?.value.trim() || '', postType: postTypeSelect.value }); } }); const printRequests = { priceTags: reqPriceTagsCheckbox?.checked || false, posters: reqPostersCheckbox?.checked || false, inStoreSignage: reqSignageCheckbox?.checked || false, notes: printNotesTextarea?.value.trim() || '', }; const now = new Date(); const formData = { storeName: storeNameInput?.value.trim() || '', submittedBy: submittedByInput?.value.trim() || '', storeId: `STORE_${(storeNameInput?.value || 'UNKNOWN').trim().replace(/\s+/g, '_').toUpperCase()}`, submissionDate: now.toISOString(), lastUpdated: now.toISOString(), /* approvalStatus removed */ flyerValidStartDate: startDateInput?.value || '', flyerValidEndDate: endDateInput?.value || '', generalNotes: generalNotesTextarea?.value.trim() || '', products: products, socialMediaItems: socialMediaItems, printRequests: printRequests, }; console.log("Sending to /api/submit..."); try { const response = await fetch('/api/submit', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(formData), }); if (response.ok) { const result = await response.json(); console.log("Submit Success:", result); showSuccessModal(`Submission successful! ID: ${result.submissionId || 'N/A'}`); /* Reset form? */ } else { let errorMsg = response.statusText; try { const errorResult = await response.json(); errorMsg = errorResult.message || errorMsg; console.error(`Submit Backend error: ${response.status}`, errorResult); } catch (jsonError) { console.error(`Submit Backend error: ${response.status}. No JSON.`); } if(formErrorElement) { formErrorElement.textContent = `Submit Error: ${errorMsg}`; formErrorElement.style.display = 'block'; } else { alert(`Submit Error: ${errorMsg}`); } } } catch (error) { console.error('Submit Network/fetch error:', error); if(formErrorElement) { formErrorElement.textContent = 'Network error.'; formErrorElement.style.display = 'block'; } else { alert('Network error.'); } } }

// --- Helper Functions for In-Memory Data Store ---
function storeProductData(data) { if (!data || !data.id) return; productDataStore.set(data.id, data); }
function getProductDataById(id) { return productDataStore.get(id); }
function removeProductData(id) { productDataStore.delete(id); }

// --- Global Initialization ---
if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', initializeForm); } else { initializeForm(); }